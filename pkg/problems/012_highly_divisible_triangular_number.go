package problems

import (
	"fmt"
)

type HighlyDivisibleTriangularNumber struct{}

func (p *HighlyDivisibleTriangularNumber) ID() int {
	return 12
}

func (p *HighlyDivisibleTriangularNumber) Text() string {
	return `The sequence of triangle numbers is generated by adding the
natural numbers.  So the 7th triangle number would be
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.

The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have
over five hundred divisors?
`
}

// The number of unique factors for a number can be found by the
// number of unique combinations of it's prime factors
//
// 28 = 2^2 * 7
//
// Factors of 28 are composed of 0, 1, or 2 2's and 0 or 1 7.
// 3 choices * 2 choices = 6 choices or 6 unique factors (1,2,4,7,14,28)
func (p *HighlyDivisibleTriangularNumber) Solve() (string, error) {

	var comb int

	term := uint64(0)
	i := uint64(1)

	for {
		term += i
		pf := primeFactors(term)
		comb = 1
		for _, count := range pf {
			comb *= count + 1
		}
		if comb > 500 {
			break
		}
		i++
	}

	return fmt.Sprintf("%d", term), nil
}
