package problems

import (
	"fmt"
)

type PentagonNumbers struct{}

func (p *PentagonNumbers) ID() int {
	return 44
}

func (p *PentagonNumbers) Text() string {
	return `Pentagonal numbers are generated by the formula,
P(n)=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P(4) + P(7) = 22 + 70 = 92 = P(8). However, their
difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, P(j) and P(k), for which their sum and
difference are pentagonal and D = |P(k) − P(j)| is minimised; what is
the value of D?
`
}

func (p *PentagonNumbers) Solve() (string, error) {

	pentagonNumber := func(n uint64) uint64 {
		return n * (3*n - 1) / 2
	}

	pentagonNumbers := map[uint64]bool{}
	maxN := uint64(0)

	// closure over the cache of triangle numbers map
	// should probably switch over to solving the quadratic (meh)
	isPentagon := func(n uint64) bool {
		for {
			if n <= maxN {
				break
			}
			maxN++
			pentagonNumbers[pentagonNumber(maxN)] = true
		}
		return pentagonNumbers[n]
	}

	for j := uint64(2); j <= uint64(10000); j++ {
		pj := pentagonNumber(j)
		for k := uint64(1); k < j; k++ {
			pk := pentagonNumber(k)
			if isPentagon(pj-pk) && isPentagon(pj+pk) {
				return fmt.Sprintf("%d", pj-pk), nil
			}
		}
	}

	return fmt.Sprintf("%d", 0), nil
}
